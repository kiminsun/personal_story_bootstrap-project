# GitHub Pages 배포를 위한 GitHub Actions 워크플로우
name: Deploy to GitHub Pages

# 트리거 조건: main 브랜치에 push되거나 수동으로 실행할 때
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

# 권한 설정
permissions:
  contents: read
  pages: write
  id-token: write

# 동시 실행 제한
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 빌드 작업
  build:
    runs-on: ubuntu-latest
    
    steps:
    # 1. 코드 체크아웃
    - name: Checkout repository
      uses: actions/checkout@v4
      
    # 2. Node.js 설정 (필요한 경우)
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
      if: false  # 현재는 정적 사이트이므로 비활성화
        
    # 3. 의존성 설치 (필요한 경우)
    - name: Install dependencies
      run: npm ci
      if: false  # 현재는 정적 사이트이므로 비활성화
      
    # 4. 빌드 실행 (필요한 경우)
    - name: Build project
      run: npm run build
      if: false  # 현재는 정적 사이트이므로 비활성화
      
    # 5. 파일 검증
    - name: Verify files
      run: |
        echo "Checking required files..."
        ls -la
        if [ ! -f "index.html" ]; then
          echo "Error: index.html not found!"
          exit 1
        fi
        if [ ! -d "assets" ]; then
          echo "Error: assets directory not found!"
          exit 1
        fi
        if [ ! -d "data" ]; then
          echo "Error: data directory not found!"
          exit 1
        fi
        echo "All required files are present."
        
    # 6. 플레이스홀더 이미지 생성
    - name: Create placeholder images
      run: |
        mkdir -p assets/images
        # SVG 플레이스홀더 이미지 생성
        cat > assets/images/placeholder.jpg << 'EOF'
        <svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
          <rect width="100%" height="100%" fill="#e2e8f0"/>
          <text x="50%" y="50%" text-anchor="middle" dy=".3em" fill="#64748b" font-family="Arial, sans-serif" font-size="18">
            이미지 준비 중
          </text>
        </svg>
        EOF
        
        # 프로젝트 이미지들 복사
        for i in {1..6}; do
          cp assets/images/placeholder.jpg assets/images/project${i}.jpg
        done
        
        # OG 이미지 생성
        cat > assets/images/og-image.jpg << 'EOF'
        <svg width="1200" height="630" xmlns="http://www.w3.org/2000/svg">
          <defs>
            <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" style="stop-color:#6366f1;stop-opacity:1" />
              <stop offset="100%" style="stop-color:#8b5cf6;stop-opacity:1" />
            </linearGradient>
          </defs>
          <rect width="100%" height="100%" fill="url(#grad)"/>
          <text x="50%" y="40%" text-anchor="middle" dy=".3em" fill="white" font-family="Arial, sans-serif" font-size="48" font-weight="bold">
            개인 포트폴리오
          </text>
          <text x="50%" y="60%" text-anchor="middle" dy=".3em" fill="white" font-family="Arial, sans-serif" font-size="24">
            Personal Portfolio Website
          </text>
        </svg>
        EOF
        
        # 파비콘 생성 (간단한 SVG)
        cat > assets/images/favicon.ico << 'EOF'
        <svg width="32" height="32" xmlns="http://www.w3.org/2000/svg">
          <rect width="100%" height="100%" fill="#6366f1"/>
          <text x="50%" y="50%" text-anchor="middle" dy=".3em" fill="white" font-family="Arial, sans-serif" font-size="20" font-weight="bold">
            S
          </text>
        </svg>
        EOF
        
    # 7. 배경 비디오 플레이스홀더 생성
    - name: Create video placeholder
      run: |
        mkdir -p assets/videos
        # 비디오 파일이 없는 경우를 대비한 설명 파일 생성
        cat > assets/videos/README.md << 'EOF'
        # 배경 비디오 파일
        
        이 디렉토리에 `background-video.mp4` 파일을 추가하세요.
        
        ## 권장 사양
        - 해상도: 1920x1080 (Full HD) 이상
        - 형식: MP4 (H.264 코덱)
        - 길이: 10-30초 (루프 재생됨)
        - 파일 크기: 10MB 이하 권장
        
        ## 주의사항
        - 저작권이 있는 영상은 사용하지 마세요
        - 무료 스톡 비디오 사이트 추천:
          - Pixabay (https://pixabay.com/videos/)
          - Pexels (https://www.pexels.com/videos/)
          - Unsplash (https://unsplash.com/videos/)
        EOF
        
    # 8. GitHub Pages 설정
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    # 9. 아티팩트 업로드
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'

  # 배포 작업
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
